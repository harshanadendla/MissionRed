//kth smallest in BIT ante....binary search for query(i)==k
//same functionality as ordered_set

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std;
using namespace __gnu_pbds;

template<size_t>
struct debug{};

template <class T>
ostream& print_tuple(ostream& out, const T& t, debug<1> ) {
    return out << get<tuple_size<T>::value-1>(t);
}

template <class T, size_t idx>
ostream& print_tuple(ostream& out, const T& t, debug<idx> ) {
    out << get< tuple_size<T>::value-idx >(t) << " , ";
    return print_tuple(out, t, debug<idx-1>());
}

template <class... Args>
ostream& operator<<(ostream& out, const tuple<Args...>& t) {
    out << "\n[";
    print_tuple(out, t, debug<sizeof...(Args)>());
    return out << "]\n";
}

template<class T>
using rbTree=tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define int long long int
#define endl '\n'
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define unmap unordered_map
#define mset multiset
#define pii pair<int,int>
#define vi vector<int>
#define vpii vector<pair<int,int>>
#define vvi vector<vector<int>>
#define mem(u,v) memset(u,v,sizeof(u))
#define all(x) x.begin(),x.end()
#define r_all(x) x.rbegin(),x.rend()
#define dbg(x) cerr<<x<<"\n"
#define bug(x) cout<<"hi"<<x<<endl

const int N=1e6+5;
const int mod=1e9+7;
double pi=1.0l*acos(-1);

int Madd(int a,int b) {
    return ((a%mod)+(b%mod)+mod)%mod;
}

int Mmull(int a,int b) {
    return ((a%mod)*(b%mod)+mod)%mod;
}

//#define test_cases

int n,q;
int bit[N];

void update(int idx,int val) {
	while (idx<=n) {
		bit[idx]+=val;
		idx+=idx&(-idx);
	}
}

int query(int idx) {
	int res=0;
	while (idx>=1) {
		res+=bit[idx];
		idx-=(idx&(-idx));
	}
	return res;
}

void solve() {
	cin>>n>>q;
	
	for (int i=1,x;i<=n;i++) {
		cin>>x;
		update(x,1);
		}
	
	for (int i=0,x;i<q;i++) {
		cin>>x;
		if (x>0) {
			update(x,1);
		} else {
			int l=1,r=n;
			while (l<r) {
				int mid=l+(r-l)/2;
				if (query(mid) < (-x)) {
					l=mid+1;
				} else {
					r=mid;
				}
			}
			update(l,-1);
		}
	}
	
	for (int i=1;i<=n;i++) {
		if (query(i)>0) {
			cout<<i<<endl;
			return;
		}
	}
	cout<<0<<endl;
	return;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
#ifdef Harsha
	freopen("input.txt","r",stdin);
#endif

    int t=1;
#ifdef test_cases
    cin>>t;
#endif

    while(t--) {
        solve();
    }
    
    return 0;
}
